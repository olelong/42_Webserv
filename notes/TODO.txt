							/**** WEBSERV ****/

TODO:

-	verifier fichier que j enregistre car je crois que pour un fichier
	e/e j enregistre que /e?

-	met une erreur si apres HTTP/1.1 il y a un espace -> est ce a gerer differemment ou c est bon?

-	CGI cf.schema envoye par wael de l'architecture d utilisation de cgi
-	Faire pleins de tests




PARSING ERROR:


-------

PARSING ERROR FINISHED:


-	si il y a un header host je l enregistre dans essentialHeaders => OKK

-	=> Regler cas ou il y a qu'un seul type dans acceptHeader ex: text/html => OK
	=> header accept non obligatoire mais du coup gerer le cas ou il y en a pas pour le content type car
	dans ce cas le client accepte tous les types donc mettre un par defaut : text/html
	=> Si il n y a pas de header accept retire l'erreur et mettre content-Type a un type par defaut comme text/html

-	header ne peut pas se terminer par un slash ou une virgule => OK
-	savoir si la ligne accept peut finir par un ; ou non si non rajouter erreur => on s est dit que pour le moment
	ce n etait pas une erreur => OK
-	type MIME de content-type forcement : type/sous_type, 
	si dans le type MIME il y a pas de slash "/" = ERROR
	Verifier pour tous les type MIME de ACCEPT => OKKKK 
-	Function ignoreQ() plus clean et erase bien de
q jusqu a la prochaine virgule ou point virgule
-	Si le code status = 426 -> renvoye dans la reponse le protocole a utiliser dans un header Upgrade => OK juste verifier si on laisse code error
-	Pas deux fois le meme header, pas de headers en doublons => OK
-	Si il y a un body dans la requete verifier que c est bien la meme que content-length => OK
-	Si il y a un body verifie qu'il y a bien un content-length sinon error => OK
-	headers sans ":" => OK 
-	ignorer fin du accept q= pour eviter que si l'on me demande un fichier .q 
	=> ignorer q= dans le header accept de GET POST ou DELETE => OK
	qu il prenne en compte celui la alors que c'en est pas un => OK
-	requete sans accept header => OK 
-	cas ou il n y a pas de "." dans le fichier et que c est pas le 1er html => OK
-	=> Enlever le fait que si le fichier n a pas de points que ce soit une erreur
	car peut ne pas avoir d'extensions => OK on retourne le premier contenu de accept si il y a pas de "."

-	type MIME : 
	tests qui passent:
	//,,
	salut/hello/machin
	,salut/hello/machin
	/salut/hello,machin
	truc/salut/hello;
	truc/salut/hello,machin
	h,salut/hello/machin
	truc/salut/hello;a
	a,hey/hello
	truc/salut/hello,machin;
	truc/salut/hello,machin;a
	truc/salut/hello,hey,coucou/coincoin

-	Mettre le body dans un fichier pour CGI pour qu'il puisse le compiler : surement dans la partie de wael du coup juste lui renvoyer le body



--------------------------------------



FINISHED:

-	probleme premiere ligne parse erreur : met erreur quand il y a 3 arguments
	dont un / au milieu mais n en met pas quand il y en a deux et qu il y a rien 
	au milieu (que si il y a deux espaces entre le premier et le dernier sinon 
	met l'erreur) => OK je gere maintenant qu entre les espaces il faut 
	quelque chose
-	Si il y a rien apres des headers ou du vide il y a rien a faire mais
	si il y a pas de body et qu il y a des mots c est une erreur=> OK
-	Recoit requete valide du client mais mon parsing
	renvoie une erreur => faire en sorte que ce soit OK
	S'adapter le plus possible a toutes les requetes.
	Erreur v= => OKK
-	; en fin de ligne de header accept finalement pas une erreur => OKK
-	Mis en commentaire : Regler empty line apres headers quand y
	a pas de body.=> OKKK
-	mettre pour toutes les methodes l'url dans la struct analysedReq => OK
-	Si ce n'est pas bon le protocole renvoyer juste une erreur 400 donc revenir en arriere
-	Reponse avec date et heure ? obligatoire dans une reponse donc a faire
	=> fonction pour la date faite par Wael => OKKK
-	Une partie d'analyse peut etre utilisee pour les 3 methodes comme: le type, le file par exemple, j'ai mis juste l'url que pour GET pour l'instant => OK 
-	Tous les commentaires en anglais et bien ecrit => OK
-	Mettre Code error correspondant => OK normalement c est bon
-	Decouper en differentes fonctions le constructeur => OK 
-	leaks => OK
-	Differencier les headers du body de la requete => OK
-	createResponse renvoie code error 400 pour requete de 1ere page html POURQUOI ? pareil pour la derniere du main POURQUOI ? => RESOLU OK 
-	Remplir le body request / separer headers et body => OK
-   reverifier check ext car ne fonctionne pas pour find le content type si il est au milieu ou fin dÂ´accept => OK
-	Error dans le main, dans la partie fill headers of the request
	1ere requete avec body, error in fill map headers dans le constructor() => OK
	des qu il y a une ligne vide.
-	Ajouter "return ;" en cas d'erreur pour s'arreter dans la fonction. => OK normalement
-	Abort createResponse => OK
-	Add url dans get dans analyse() si il y en a une => OK
-	AnalysedReq struct problemes -> OK
-	Extension check -> content type => OK
content-type: find extension si il la trouve -> pos - la derniere , ou ; d'avant et si non remplir avec la 1ere proposition  => OK
-	Analysedequest url, map essential headers  pour GET=> OK
-	m'occuper de la 1ere page html demande => OK
 (renvoie le content-type d un text/html)
 -	content-type: pb rentre toujours dans le if ou il a trouve l'ext alors que normalement non => OK
 -	Ajouter dans la premiere partie du constructeur de verifier le HTTP/1.1 et qu il y  adonc bien 3 argument dans la premiere ligne => OK
