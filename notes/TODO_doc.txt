	------------ RFC 2616 DOC ------------

REQUEST LINE?
-------------
The elements are separated by SP characters. No CR or LF is allowed
except in the final CRLF sequence.

Header Accept obligatoire ?
---------------------------
If no Accept header field is present, then it is assumed that the
client accepts all media types.

	exemple de requete/reponse la rfc :

	"Client request:

	GET /hello.txt HTTP/1.1
	User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3
	Host: www.example.com
	Accept-Language: en, mi

   Server response:

   HTTP/1.1 200 OK
   Date: Mon, 27 Jul 2009 12:28:53 GMT
   Server: Apache
   Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
   ETag: "34aa387-d-1568eb00"
   Accept-Ranges: bytes
   Content-Length: 51
   Vary: Accept-Encoding
   Content-Type: text/plain

   Hello World! My payload includes a trailing CRLF."

ENTITY BODY?
------------
The entity-body (if any) sent with an HTTP request or response is in
a format and encoding defined by the entity-header fields.

   entity-body    = *OCTET

An entity-body is only present in a message when a message-body is
present, as described in section 4.3. The entity-body is obtained
from the message-body by decoding any Transfer-Encoding that might
have been applied to ensure safe and proper transfer of the message.

ENTITY-BODY WITH CONTENT-TYPE?
Any HTTP/1.1 message containing an entity-body SHOULD include a
Content-Type header field defining the media type of that body. If
and only if the media type is not given by a Content-Type field, the
recipient MAY attempt to guess the media type via inspection of its
content and/or the name extension(s) of the URI used to identify the
resource. If the media type remains unknown, the recipient SHOULD
treat it as type "application/octet-stream".

When an entity-body is included with a message, the data type of that
body is determined via the header fields Content-Type and Content-
Encoding. These define a two-layer, ordered encoding model:
    entity-body := Content-Encoding( Content-Type( data ) )

DATE?
-----
Origin servers MUST include a Date header field in all responses,
except in these cases:
1. If the response status code is 100 (Continue) or 101 (Switching
Protocols), the response MAY include a Date header field, at
the server's option.

2. If the response status code conveys a server error, e.g. 500
(Internal Server Error) or 503 (Service Unavailable), and it is
inconvenient or impossible to generate a valid Date.

3. If the server does not have a clock that can provide a
reasonable approximation of the current time, its responses
MUST NOT include a Date header field. In this case, the rules
in section 14.18.1 MUST be followed.


GET?
----
The GET method means retrieve whatever information (in the form of an
entity) is identified by the Request-URI. If the Request-URI refers
to a data-producing process, it is the produced data which shall be
returned as the entity in the response and not the source text of the
process, unless that text happens to be the output of the process.

The semantics of the GET method change to a "conditional GET" if the
request message includes an If-Modified-Since, If-Unmodified-Since,
If-Match, If-None-Match, or If-Range header field. A conditional GET
method requests that the entity be transferred only under the
circumstances described by the conditional header field(s). The
conditional GET method is intended to reduce unnecessary network
usage by allowing cached entities to be refreshed without requiring
multiple requests or transferring data already held by the client.

The semantics of the GET method change to a "partial GET" if the
request message includes a Range header field. A partial GET requests
that only part of the entity be transferred, as described in section
14.35. The partial GET method is intended to reduce unnecessary
network usage by allowing partially-retrieved entities to be
completed without transferring data already held by the client.

STATUS CODE ?
------------
The first digit of the Status-Code defines the class of response. The
last two digits do not have any categorization role. There are 5
values for the first digit:

- 1xx: Informational - Request received, continuing process
- 2xx: Success - The action was successfully received,
  understood, and accepted
- 3xx: Redirection - Further action must be taken in order to
  complete the request
- 4xx: Client Error - The request contains bad syntax or cannot
  be fulfilled
- 5xx: Server Error - The server failed to fulfill an apparently
  valid request

REQUEST-URI?
------------
Request-URI

-	The Request-URI identifies the resource upon which to apply the request.

    Request-URI    = "*" | absoluteURI | abs_path | authority

The four options for Request-URI are dependent on the nature of the
request. The asterisk "*" means that the request does not apply to a
particular resource, but to the server itself, and is only allowed
when the method used does not necessarily apply to a resource like
OPTION method. 

-	The most common form of Request-URI is that used to identify a
resource on an origin server or gateway. In this case the absolute
path of the URI MUST be transmitted (see section 3.2.1, abs_path) as
the Request-URI, and the network location of the URI (authority) MUST
be transmitted in a Host header field. For example, a client wishing
to retrieve the resource above directly from the origin server would
create a TCP connection to port 80 of the host "www.w3.org" and send
the lines:

    GET /pub/WWW/TheProject.html HTTP/1.1
    Host: www.w3.org

-	The Request-URI is transmitted in the format specified in section
3.2.1. If the Request-URI is encoded using the "% HEX HEX" encoding
[42], the origin server MUST decode the Request-URI in order to
properly interpret the request. Servers SHOULD respond to invalid
Request-URIs with an appropriate status code.

	
1. If Request-URI is an absoluteURI, the host is part of the
Request-URI. Any Host header field value in the request MUST be
ignored.
2. If the Request-URI is not an absoluteURI, and the request includes
a Host header field, the host is determined by the Host header
field value.
3. If the host as determined by rule 1 or 2 is not a valid host on
the server, the response MUST be a 400 (Bad Request) error message.								  

REQUEST-URI AND PROXY? Talk about server_names
----------------------
The absoluteURI form is REQUIRED when the request is being made to a
proxy. The proxy is requested to forward the request or service it
from a valid cache, and return the response. Note that the proxy MAY
forward the request on to another proxy or directly to the server
specified by the absoluteURI. In order to avoid request loops, a
proxy MUST be able to recognize all of its server names, including
any aliases, local variations, and the numeric IP address. 

RESPONSE HEADER FIELDS?
-----------------------
6.2 Response Header Fields

The response-header fields allow the server to pass additional
information about the response which cannot be placed in the Status-
Line. These header fields give information about the server and about
further access to the resource identified by the Request-URI.

response-header = 
	Accept-Ranges           ; Section 14.5
  | Age                     ; Section 14.6
  | ETag                    ; Section 14.19
  | Location                ; Section 14.30
  | Proxy-Authenticate      ; Section 14.33
  | Retry-After             ; Section 14.37
  | Server                  ; Section 14.38
  | Vary                    ; Section 14.44
  | WWW-Authenticate        ; Section 14.47

 request-header = 
 	Accept                   ; Section 14.1
  | Accept-Charset           ; Section 14.2
  | Accept-Encoding          ; Section 14.3
  | Accept-Language          ; Section 14.4
  | Authorization            ; Section 14.8
  | Expect                   ; Section 14.20
  | From                     ; Section 14.22
  | Host                     ; Section 14.23
  | If-Match                 ; Section 14.24
  | If-Modified-Since        ; Section 14.25
  | If-None-Match            ; Section 14.26
  | If-Range                 ; Section 14.27
  | If-Unmodified-Since      ; Section 14.28
  | Max-Forwards             ; Section 14.31
  | Proxy-Authorization      ; Section 14.34
  | Range                    ; Section 14.35
  | Referer                  ; Section 14.36
  | TE                       ; Section 14.39
  | User-Agent               ; Section 14.43

MISSING CHARSET
---------------
HTTP/1.1 recipients MUST respect the
charset label provided by the sender; and those user agents that have
a provision to "guess" a charset MUST use the charset from the
content-type field if they support that charset, rather than the
recipient's preference, when initially displaying a document.

CHUNKED TRASNFER CODING
-----------------------
HTTP/1.1 recipients MUST respect the
charset label provided by the sender; and those user agents that have
a provision to "guess" a charset MUST use the charset from the
content-type field if they support that charset, rather than the
recipient's preference, when initially displaying a document.

All HTTP/1.1 applications MUST be able to receive and decode the
"chunked" transfer-coding, and MUST ignore chunk-extension extensions
they do not understand.
	  

***********
VOCABULARY:
***********

REQUEST-URI?
------------
FILE dans la ligne de la requete est appelee un REQUEST-URI.

MEDIA-RANGE?
------------
"q="

REQUEST-LINE?
-------------
Method token | Request-URI | protocol version
